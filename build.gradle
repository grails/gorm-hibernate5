buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:2.0.0"
        classpath "io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1"
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:views-gradle:3.2.3"
        classpath"org.asciidoctor:asciidoctor-gradle-jvm:4.0.0"
        classpath "com.github.erdi:webdriver-binaries-gradle-plugin:3.2"
    }

    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            // This is a workaround for dependencies exposing a different version of Groovy
            // than the one used by Gradle. This causes issues with the Groovy compiler.
            if (details.requested.group == 'org.apache.groovy' || details.requested.group == 'org.codehaus.groovy') {
                details.useTarget(group: "org.codehaus.groovy", name: details.requested.name, version: GroovySystem.version)
                details.because "Use Groovy 3.0.x library shipped with Gradle"
            }
        }
    }
}

group "org.grails"
version project.projectVersion
logger.info("GORM VERSION = ${project.gormVersion}")

ext {
    isTravisBuild = System.getenv().get("TRAVIS") == 'true'
    isCiBuild = project.hasProperty("isCiBuild") || System.getenv().get("CI") as Boolean
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
    nexusUsername = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
    nexusPassword = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
    isSnapshot = project.projectVersion.endsWith("-SNAPSHOT")
    groovyVersion = System.getenv('CI_GROOVY_VERSION') ?: project.groovyVersion
}

ext."signing.keyId" = System.getenv("SIGNING_KEY") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
ext."signing.password" = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : null
ext['junit-jupiter.version'] = junitJupiterVersion

if (isReleaseVersion) {
    apply plugin: 'maven-publish'
    apply plugin: "io.github.gradle-nexus.publish-plugin"

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

allprojects {

    ext.groovyVersion = System.getenv('CI_GROOVY_VERSION') ?: project.groovyVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        if(isSnapshot) {
            maven { url = 'https://repo.grails.org/grails/libs-snapshots-local' }
        }
        if(groovyVersion && groovyVersion.endsWith('-SNAPSHOT')) {
            maven {
                name = 'ASF Snapshot repo'
                url = 'https://repository.apache.org/content/repositories/snapshots'
            }
        }
    }

    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute module("org.codehaus.groovy:groovy-all") using module("org.apache.groovy:groovy:$groovyVersion")
        }

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if ((details.requested.group == 'org.codehaus.groovy' || details.requested.group == 'org.apache.groovy') && details.requested.name != 'groovy-bom') {
                details.useTarget(group: 'org.apache.groovy', name: details.requested.name, version: "$groovyVersion")
                details.because "The dependency coordinates are changed in Apache Groovy 4, plus ensure version"
            }

            if (details.requested.group == "io.micronaut" && details.requested.name == "micronaut-inject-groovy") {
                details.useVersion("4.6.1")
            }
        }
    }
}

subprojects { Project subproject ->
    
    ext {
        isExample = subproject.name.startsWith('example')
        isPluginProject = subproject.name.endsWith("-plugin") && (subproject.name.startsWith("grails") || subproject.name.startsWith("rx-"))
        isGrails3PluginProject = subproject.name.endsWith("-plugin")
    }

    if(isExample) {
        apply plugin: "groovy"

        ext['h2.version'] = h2Version
        ext['gorm.version'] = gormVersion

        if(subproject.name.startsWith("examples-grails")) {

            if (subproject.name != "examples-grails-data-service") {
                apply plugin:"org.grails.grails-web"
                apply plugin:"org.grails.grails-gsp"
                apply plugin:"com.github.erdi.webdriver-binaries"
            }
        }

        configurations.all { Configuration configuration->
            configuration.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if(details.requested.group == 'org.apache.groovy' && details.requested.name.startsWith('groovy')) {
                    details.useVersion(groovyVersion)
                }
                if(details.requested.group == 'org.springframework') {
                    details.useVersion(springVersion)
                }
                if (details.requested.group == "org.springframework.boot") {
                    details.useVersion(springBootVersion)
                }
                if (details.requested.group == "org.grails" && details.requested.name.contains("testing-support")) {
                    details.useVersion(testingSupportVersion)
                }
                if(details.requested.group == 'org.grails' &&
                        details.requested.name.startsWith('grails-datastore') &&
                        details.requested.name != 'grails-datastore-gorm-hibernate5') {
                    details.useVersion(gormVersion)
                }
            }
        }



        dependencies {
            testImplementation "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationApiVersion"
            testImplementation "io.micrometer:micrometer-core:latest.integration"
            testImplementation "io.projectreactor:reactor-test:3.6.5"
            testImplementation "org.apache.groovy:groovy-test-junit5:$groovyVersion"
            testImplementation("org.spockframework:spock-core:$spockVersion") { transitive = false}
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
            testImplementation "org.junit.platform:junit-platform-runner:1.10.2"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        }

        apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

        tasks.withType(Jar) {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }
        return
    }

    ext {
        projectInfo = new PublishingConvention(project)
        pomInfo = {
            delegate.name projectInfo.projectName
            delegate.description projectInfo.projectDescription
            delegate.url projectInfo.projectURL

            delegate.licenses {
                delegate.license {
                    delegate.name 'The Apache Software License, Version 2.0'
                    delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    delegate.distribution 'repo'
                }
            }

            delegate.scm {
                delegate.url projectInfo.projectVcsUrl
                delegate.connection projectInfo.projectVcsUrl
                delegate.developerConnection projectInfo.projectVcsUrl
            }


            delegate.developers {
                delegate.developer {
                    delegate.id 'graemerocher'
                    delegate.name 'Graeme Rocher'
                }
                delegate.developer {
                    delegate.id 'jeffscottbrown'
                    delegate.name 'Jeff Brown'
                }
                delegate.developer {
                    delegate.id 'burtbeckwith'
                    delegate.name 'Burt Beckwith'
                }
                delegate.developer {
                    delegate.id 'puneetbehl'
                    delegate.name 'Puneet Behl'
                }
            }

        }
    }

    apply plugin: 'groovy'

    configurations {
        documentation.extendsFrom(compileClasspath)
    }

    if(isPluginProject) {
        group "org.grails.plugins"
        version project.rootProject.version
    }
    else {
        group "org.grails"
        version project.rootProject.version
    }

    if(subproject.name == 'docs') {
        return
    }

    if(isGrails3PluginProject) {
        apply plugin: "org.grails.grails-plugin"       
    }
    else {
        apply plugin:"groovy"
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withJavadocJar()
        withSourcesJar()
    }

    dependencies {
        documentation "org.fusesource.jansi:jansi:$jansiVersion"
        documentation "org.apache.groovy:groovy-dateutil:$groovyVersion"
        documentation "info.picocli:picocli:$picocliVersion"
        documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"

        implementation "org.apache.groovy:groovy:$groovyVersion"
        testImplementation "org.apache.groovy:groovy-test-junit5:$groovyVersion"
        testImplementation("org.spockframework:spock-core:$spockVersion") { transitive = false}
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.platform:junit-platform-runner:1.10.2"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    }

    apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

    tasks.withType(Test) {
        configure {
            retry {
                maxRetries = 2
                maxFailures = 20
                failOnPassedAfterRetry = true
                filter {
                    excludeClasses.add("*GroovyChangeLogSpec")
                }
            }
        }
    }

    groovydoc.classpath = configurations.documentation

    publishing {

        if (isBuildSnapshot) {
            repositories {
                maven {
                    credentials {
                        def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
                        def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
                        username = u
                        password = p
                    }
                    if(isGrails3PluginProject) {
                        url  "https://repo.grails.org/grails/plugins3-snapshots-local"
                    } else {
                        url  "https://repo.grails.org/grails/libs-snapshots-local"
                    }
                }
            }
        }

        publications {
            maven(MavenPublication) {

                pom {
                    name = projectInfo.projectName
                    description = projectInfo.projectDescription
                    url = projectInfo.projectURL

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'scm:git@github.com:grails/gorm-hibernate5.git'
                        connection = 'scm:git@github.com:grails/gorm-hibernate5.git'
                        developerConnection = 'scm:git@github.com:grails/gorm-hibernate5.git'
                    }

                    developers {
                        developer {
                            id = 'puneetbehl'
                            name = 'Puneet Behl'
                            email = 'behlp@unityfoundation.io'
                        }
                    }
                }

                artifactId projectInfo.projectArtifactId

                from components.java

                afterEvaluate {
                    if(isGrails3PluginProject) {
                        artifact source:"${sourceSets.main.groovy.getClassesDirectory().get().getAsFile()}/META-INF/grails-plugin.xml",
                                classifier:"plugin",
                                extension:'xml'
                    }
                }

            }
        }
    }

    afterEvaluate {
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.maven
        }
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    //do not generate extra load on Nexus with new staging repository if signing fails
    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
        shouldRunAfter(tasks.withType(Sign))
    }
}

class PublishingConvention {
    Project project

    String projectArtifactId
    String projectName = 'GORM for Hibernate 5'
    String projectDescription = 'Provides a GORM Object Mapping implementations for Hibernate 5'
    String projectURL = 'https://gorm.grails.org/latest/hibernate'
    String projectIssueTrackerUrl = 'https://github.com/grails/gorm-hibernate5/issues'
    String projectVcsUrl = 'https://github.com/grails/gorm-hibernate5'

    PublishingConvention(Project project) {
        this.project = project

        def name = project.name
        if(name.startsWith('grails') && name.endsWith('-plugin')) {
            name = 'hibernate5'
        }
        projectArtifactId = name
    }
}

